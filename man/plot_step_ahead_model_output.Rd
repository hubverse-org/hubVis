% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_step_ahead_model_output.R
\name{plot_step_ahead_model_output}
\alias{plot_step_ahead_model_output}
\title{Basic Plot for model outputs}
\usage{
plot_step_ahead_model_output(
  model_out_tbl,
  target_data,
  use_median_as_point = FALSE,
  intervals = c(0.5, 0.8, 0.95),
  log_scale = FALSE,
  show_plot = TRUE,
  plot_target = TRUE,
  x_col_name = "target_date",
  x_target_col_name = "date",
  show_legend = TRUE,
  facet = NULL,
  facet_scales = "fixed",
  facet_nrow = NULL,
  facet_ncol = NULL,
  facet_title = "top left",
  interactive = TRUE,
  fill_by = "model_id",
  pal_color = "Set2",
  one_color = "blue",
  fill_transparency = 0.25,
  top_layer = "model_output",
  title = NULL,
  ens_color = NULL,
  ens_name = NULL,
  group = NULL
)
}
\arguments{
\item{model_out_tbl}{a \code{model_out_tbl} object, containing all the required
columns including a column containing date information (\code{x_col_name}
parameter) and a column \code{value}.}

\item{target_data}{a \code{data.frame} object containing the target data,
with a column containing date information (\code{x_target_col_name} parameter) and
a column \code{observation}. Ignored, if \code{plot_target = FALSE}.}

\item{use_median_as_point}{a \code{Boolean} for using median quantile as point
in plot. Default to FALSE. If TRUE, will select first any \code{median}
output type value and if no \code{median} value included in \code{model_out_tbl};
will select \code{quantile = 0.5} output type value.}

\item{intervals}{a vector of \code{numeric} values indicating which central
prediction interval levels to plot.Value possibles:
\verb{NULL, 0.5, 0.8, 0.9, 0.95}. \code{NULL} means no interval levels, if the
\code{model_out_tbl} table contains \code{"sample"} output type, the samples will be
plotted. If not provided, it will default to \code{c(.5, .8, .95)}.
When plotting 6 models or more, the plot will be reduced to show \code{.95}
interval only (if the parameter is not set to \code{NULL}).}

\item{log_scale}{a \code{boolean} to plot y-axis output on a log scale. Default to
FALSE}

\item{show_plot}{a \code{boolean} for showing the plot. Default to TRUE.}

\item{plot_target}{a \code{boolean} for showing the target data in the plot.
Default to TRUE. Data used in the plot comes from the parameter
\code{target_data}}

\item{x_col_name}{column name containing the date information for \code{all_plot}
and \code{all_ens} data frames, value will be map to the x-axis of the plot.
By default, "target_date".}

\item{x_target_col_name}{column name containing the date information for
\code{target_data} data frame, value will be map to the x-axis of the plot.
By default, "date".}

\item{show_legend}{a \code{boolean} for showing the legend in the plot.
Default to TRUE.}

\item{facet}{a unique value corresponding to a task_id variable name
(interpretable as facet option for ggplot)}

\item{facet_scales}{argument for scales as in \link[ggplot2:facet_wrap]{ggplot2::facet_wrap} or
equivalent to \code{shareX}, \code{shareY} in \link[plotly:subplot]{plotly::subplot}. Default to "fixed"
(x and y axes are shared).}

\item{facet_nrow}{a numeric, number of rows in the layout.}

\item{facet_ncol}{a numeric, number of columns in the layout
(ignored in \link[plotly:subplot]{plotly::subplot})}

\item{facet_title}{a \code{string}, position of each subplot tile (value
associated with the \code{facet} parameter). "top right", "top left" (default),
"bottom right", "bottom left" are the possible values, \code{NULL} to remove the
title. For interactive plot only.}

\item{interactive}{a \code{boolean} to output an "interactive" version of the
plot (using Plotly) or a "static" plot (using ggplot2). By default, \code{TRUE}
(interactive plot)}

\item{fill_by}{name of a column for specifying colors and legend in plot.
The \code{pal_color} parameter can be use to change the palette.
Default to \code{model_id}.}

\item{pal_color}{a \code{character} string for specifying the palette color in the
plot. Please refer to \code{\link[RColorBrewer:ColorBrewer]{RColorBrewer::display.brewer.all()}}. If \code{NULL},
only \code{one_color} parameter will be used for all models. Default to \code{"Set2"}}

\item{one_color}{a \code{character} string for specifying the color in the
plot if \code{pal_color} is set to \code{NULL}. Please refer
to \code{\link[=colors]{colors()}} for accepted color names. Default to \code{"blue"}}

\item{fill_transparency}{numeric value used to set transparency of intervals.
0 means fully transparent, 1 means opaque. Default to \code{0.25}}

\item{top_layer}{character vector, where the first element indicates the top
layer of the resulting plot. Possible options are \code{"model_output"} (default)
and \code{"target"}}

\item{title}{a \code{character} string, if not NULL, will be added as title to the
plot}

\item{ens_color}{a \code{character} string of a color name, if not NULL, will be
use as color for the model name associated with the parameter \code{ens_name}
(both parameter need to be provided)}

\item{ens_name}{a \code{character} string of a model name, if not NULL, will be
use to change the color for the model name, associated with the parameter
\code{ens_color}(both parameter need to be provided)}

\item{group}{column name for partitioning the data in the data according
the the value in the column. Please refer to \link[ggplot2:aes_group_order]{ggplot2::aes_group_order} for
more information. By default, NULL (no partitioning).}
}
\description{
Create a simple time-series plot for model projection outputs. Plot either
quantiles or samples output type, see Details for more information.
}
\details{
The function can generate a plot with:
\itemize{
\item ribbons for quantiles output type OR
\item spaghetti plot for samples output type
}

depending on the parameters \code{model_out_tbl} and \code{intervals}:
\itemize{
\item if \code{intervals} is set to \code{NULL} and the \code{model_out_tbl} contains \code{"sample"}
output type, a spaghetti plot will be generated
\item if \code{intervals} set set one or multiples of the possible values:
\verb{0.5, 0.8, 0.9, 0.95}  and the \code{model_out_tbl} contains \code{"quantile"} output
type, the quantiles will be used, if only \code{"sample"} output type is available
in the \code{model_out_tbl}, the \code{"sample"} will be used to calculate the
necessary quantiles.
}
}
\examples{

# Load and Prepare Data
# The package hubExmaple contains example files, please consult the
# documentation associated with the package, for more information.
library(hubExamples)
head(scenario_outputs)
head(scenario_target_ts)
projection_data <- dplyr::mutate(scenario_outputs,
     target_date = as.Date(origin_date) + (horizon * 7) - 1)
projection_data <- dplyr::filter(projection_data,
     scenario_id == "A-2021-03-05", location == "US")
projection_data <- hubUtils::as_model_out_tbl(projection_data)

target_data_us <- dplyr::filter(scenario_target_ts, location == "US",
                                date < min(projection_data$target_date) + 21,
                                date > "2020-10-01")
# Plot
plot_step_ahead_model_output(projection_data, target_data_us)

}
